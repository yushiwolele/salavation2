"""
Django settings for Salvation project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import sys, os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOGIN_URL = '/'
# # 设置会话过期时间为一天（24小时 * 60分钟 * 60秒），如果不设置，默认14天
SESSION_COOKIE_AGE = 86400

# add app path

sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!&5+sefg9k+eo3zt5@40p-@+e9^n6t5gqs*uo40f4q+e6l^^vo'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
AUTH_USER_MODEL = "oauth.Users"
# Application definition
sys.path.insert(0,os.path.join(BASE_DIR, 'extra_apps'))

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    #'customadmin.apps.CustomAdminConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'bootstrap4',
    'crispy_forms',
    "crispy_bootstrap5",
    'rest_framework',
    'django_celery_beat',  # 定时任务
    #'django_celery_results',  # 查看 celery 执行结果
    'rest_framework.authtoken',
    'oauth',
    'customadmin',
    'testcases',
    'channels',
    'debug_toolbar',


]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 注意顺序，必须放在这儿
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]
INTERNAL_IPS = [
    '127.0.0.1',
]
CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'Salvation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
#ASGI_APPLICATION = 'Salvation.asgi.application'
WSGI_APPLICATION = 'Salvation.wsgi.application'
# 使用 Channels 作为异步后端

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

#开发环境
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'salvationlite',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'OPTIONS': {'charset': 'utf8'}
    }
}
#生产环境
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'salvationlite',
#         'USER': 'root',
#         'PASSWORD': 'Root1234@',
#         'HOST': '123.56.193.45',
#         'PORT': 3306,
#         'OPTIONS': {'charset': 'utf8'}
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

SIMPLEUI_HOME_INFO = False
SIMPLEUI_ANALYSIS = False
SIMPLEUI_HOME_TITLE = '首页111'
SIMPLEUI_HOME_QUICK = False
SIMPLEUI_HOME_ACTION = False
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CRISPY_TEMPLATE_PACK = 'bootstrap5'

REST_FRAMEWORK = {
    # 用户认证
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication', ],

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',  # 分页功能
    'PAGE_SIZE': 50  # 一页可现实数据条数
}

# check 扫描相关
#CHECK_SHELL_PATH = '/Users/reda-flight/Desktop/djwork/Salvation/toolsrc/dependency-check/bin/dependency-check.sh'  # check.sh 脚本路径 task 执行时的路径


############### 工具相关配置

# AES加解密 默认参数配置
KEY = '0000000000000000'
IV = 'aaaaaaaaaaaaaaaa'

# ftp工具下载路径
FTP_PATH = '/upload/tool/FTPdownload.zip'

############### celery 相关配置

CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_ENABLE_UTC = True
DJANGO_CELERY_BEAT_TZ_AWARE = False #不考虑时区

#CELERY_BROKER_URL = 'memory://'
#CELERY_BROKER_URL = 'django://'
#CELERY_BROKER_URL = r'F:\Salvation'
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'  # celery 结果返回，可用于跟踪结果
#CELERY_RESULT_BACKEND = 'django-db'  # 使用 database 作为结果存储
#CELERY_CACHE_BACKEND = 'django-cache'  # celery 后端缓存
#CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
#CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERYD_MAX_TASKS_PER_CHILD = 50  # 由于长期运行会导致内存不释放，需要设置池子回收
#CELERYD_CONCURRENCY = 5  # worker的并发数
#  celery 定时任务
#
CELERY_BEAT_SCHEDULE = {
    'delete_files_task': {  # 删除数据任务
        'task': 'testcases.tasks.delete_files_task',  # AppName应用的tasks.py文件中的方法名
        'schedule': timedelta(minutes=2),  # 每2分钟执行

    }
}

###### 日志相关
cur_path = os.path.dirname(os.path.realpath(__file__))  # log_path是存放日志的路径
log_path = os.path.join(os.path.dirname(cur_path), 'logs')
if not os.path.exists(log_path): os.mkdir(log_path)  # 如果不存在这个logs文件夹，就自动创建一个
# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]--%(message)s'
        },
    },
    'handlers': {
        # 输出日志的控制台
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        # 输出日志到文件，按日期滚动
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'logs/salvation.log',
            'when': 'midnight', # 轮转时间
            'interval': 1, # 时间间隔的数量，1 表示每天
            'backupCount': 2, # 保留的旧日志文件数量  -- 【未生效？？？】
            'formatter': 'verbose'
        },
    },
    #开发
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'salvation': {
            'handlers': ['console','file'],
            'level': 'INFO', #和引用的handlers级别不同时，优先这里
            'propagate': True,
        },
    },
    #生产
    # 'loggers': {
    #     'django': {
    #         'handlers': ['console'],
    #         'level': 'INFO',
    #         'propagate': True,
    #     },
    #     'salvation': {
    #         'handlers': ['file'],
    #         'level': 'WARNING',
    #         'propagate': True,
    #     },
    # },
}
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

SIMPLEUI_CONFIG = {
    # 是否使用系统默认菜单。
    'system_keep': False,

    # 用于菜单排序和过滤, 不填此字段为默认排序和全部显示。 空列表[] 为全部不显示.
    'menu_display': ["周期任务","用户管理","系统目录结构管理","文件类型管理"],

    # 设置是否开启动态菜单, 默认为False. 如果开启, 则会在每次用户登陆时刷新展示菜单内容。
    # 一般建议关闭。
    'dynamic': False,
    'menus': [
        # {
        #     'app': 'auth',
        #     'name': '权限认证',
        #     'icon': 'fas fa-user-shield',
        #     'models': [
        #         {
        #             'name': '用户列表',
        #             'icon': 'fa fa-user',
        #             ## 注意url按'/admin/应用名小写/模型名小写/'命名。   /admin/oauth/users/
        #             'url': '/admin/oauth/users/'
        #         },
        #         {
        #             'name': '用户组',
        #             'icon': 'fa fa-th-list',
        #             'url': 'auth/group/'
        #         }
        #     ]
        # },
        {
            'name': '用户管理',
            'icon': 'fa fa-user',
            ## 注意url按'/admin/应用名小写/模型名小写/'命名。   /admin/oauth/users/
            'url': '/admin/oauth/users/'
         },
        # {
        #     'name': '任务管理',
        #     'icon': 'fa fa-th-list',
        #     'models': [
        #         {
        #             'name': '任务列表',
        #             # 注意url按'/admin/应用名小写/模型名小写/'命名。
        #             'url': '/admin/tasks/task/',
        #             'icon': 'fa fa-tasks'
        #         },
        #     ]
        # },
        {
            'name': '周期任务',
            'icon': 'fa fa-th-list',
            'models': [
                {
                    'name': '周期性任务',
                    # 注意url按'/admin/应用名小写/模型名小写/'命名。
                    'url': '/admin/django_celery_beat/periodictask/',
                    'icon': 'fa fa-tasks'
                },
                {
                    'name': '定时',
                    # 注意url按'/admin/应用名小写/模型名小写/'命名。
                    'url': '/admin/django_celery_beat/clockedschedule/',
                    'icon': 'fa fa-tasks'
                },
                {
                    'name': '日程事件',
                    # 注意url按'/admin/应用名小写/模型名小写/'命名。
                    'url': '/admin/django_celery_beat/solarschedule/',
                    'icon': 'fa fa-tasks'
                },
                {
                    'name': '计划任务',
                    # 注意url按'/admin/应用名小写/模型名小写/'命名。
                    'url': '/admin/django_celery_beat/crontabschedule/',
                    'icon': 'fa fa-tasks'
                },
                {
                    'name': '间隔',
                    # 注意url按'/admin/应用名小写/模型名小写/'命名。
                    'url': '/admin/django_celery_beat/intervalschedule/',
                    'icon': 'fa fa-tasks'
                },
            ]
        },
       {
           'name': '系统目录结构管理',
           # 注意url按'/admin/应用名小写/模型名小写/'命名。
           'url': '/admin/customadmin/systemcontent/',
           'icon': 'fa fa-tasks'
       },
        {
           'name': '文件类型管理',
           # 注意url按'/admin/应用名小写/模型名小写/'命名。
           'url': '/admin/customadmin/filetype/',
           'icon': 'fa fa-tasks'
       },
    ]
}